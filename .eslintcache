[{"/home/gacheru/apps/nft-sniper/src/chrome/rank_extractor.ts":"1","/home/gacheru/apps/nft-sniper/src/routes/Home.tsx":"2","/home/gacheru/apps/nft-sniper/src/chrome/content.ts":"3","/home/gacheru/apps/nft-sniper/src/chrome/background.ts":"4","/home/gacheru/apps/nft-sniper/src/routes/About.tsx":"5","/home/gacheru/apps/nft-sniper/src/index.tsx":"6","/home/gacheru/apps/nft-sniper/src/App.tsx":"7","/home/gacheru/apps/nft-sniper/src/reportWebVitals.ts":"8"},{"size":576,"mtime":1642880844093,"results":"9","hashOfConfig":"10"},{"size":7567,"mtime":1643274799074,"results":"11","hashOfConfig":"10"},{"size":4201,"mtime":1642943359092,"results":"12","hashOfConfig":"10"},{"size":538,"mtime":1642873993803,"results":"13","hashOfConfig":"10"},{"size":422,"mtime":1607088493000,"results":"14","hashOfConfig":"10"},{"size":663,"mtime":1643232127525,"results":"15","hashOfConfig":"10"},{"size":415,"mtime":1607088493000,"results":"16","hashOfConfig":"10"},{"size":425,"mtime":1607088493000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"eh7a5h",{"filePath":"20","messages":"21","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gacheru/apps/nft-sniper/src/chrome/rank_extractor.ts",[],"/home/gacheru/apps/nft-sniper/src/routes/Home.tsx",["38","39","40","41","42","43","44","45","46","47","48","49","50","51"],"/home/gacheru/apps/nft-sniper/src/chrome/content.ts",["52"],"import { extractRank } from \"./rank_extractor\";\nimport '../chrome/content.css'\nexport {}\nconst injectElements = (elementToBeInjected?: Node) => {\n    const collectionName = window.location.toString().split(\"/\")[4];\n    var parser = new DOMParser();\n    chrome.runtime.sendMessage(\n      { collectionName: collectionName },\n      function (response:any) {\n        console.log(response)\n        let magicEdenCardContainer = document.querySelectorAll(\n          \".infinite-scroll-component > div.tw-flex.tw-flex-wrap.tw-overflow-hidden > div.grid-card\"\n        );\n        const cards = magicEdenCardContainer;\n  \n        if (elementToBeInjected !== undefined) {\n          console.log(\"called\");\n          injectRankToElement(elementToBeInjected, response.moonRankData);\n          return;\n        }\n  \n        for (let i = 0; i < cards.length; i++) {\n          injectRankToElement(cards[i], response.moonRankData);\n        }\n      }\n    );\n  };\n\n  const pinStyleLoad = (el:HTMLDivElement) => {\n    el.style.paddingLeft = '8px'\n    el.style.height = 'auto'\n    el.style.cursor = 'pointer'\n    el.style.bottom = '20px'\n  }\n\n  const pinImgStyleLoad = (el:HTMLImageElement) => {\n    el.style.height = '32px'\n    el.style.objectFit = 'contain'\n  }\n\n  const rankStyleLoad = (el:HTMLSpanElement, rank:number) => {\n    \n    el.style.fontSize = '1rem'\n    el.style.zIndex = '99'\n    if(rank < 100 ) el.style.color = '#51ff0d'\n    el.style.color = 'yellow'\n  }\n\n  const parentDivStyleLoad = (el:HTMLDivElement) => {\n    el.style.display = 'flex'\n    el.style.paddingBottom = '1rem'\n    el.style.width = 'fit-content'\n  }\n  var iterator = 0;   \n  const injectRankToElement = (element: any, rankData:any ) => {\n\n    //create elements\n    let parentDiv = document.createElement(\"div\")\n    let rank = document.createElement(\"span\");\n    let pinIcon = document.createElement(\"div\");\n    let pinImg = document.createElement('img')\n\n    const itemName:string = element.querySelector(\"div > a > h6\").textContent;   \n    pinIcon.setAttribute('id', `pinIcon${iterator}`)\n\n    pinIcon.setAttribute('onclick', `(function() {\n      chrome.storage.local.set({'itemSelected': '${itemName}'}, () => {\n        console.log('item name: %s', JSON.stringify(value));\n      }\n      )\n    })();\n      `)\n    \n    //\n    //link pin icon image\n    pinImg.src = \"https://cdn-user-icons.flaticon.com/17735/17735582/1642767925932.svg?token=exp=1642768833~hmac=7e432254be92fcd25cc5d8b6eac12a46\"\n    pinImg.alt = \"pin NFT\"\n    element.style.gap = \"10px\";\n    const rankNumberData:number = extractRank(itemName, rankData)\n    //load styles\n    pinStyleLoad(pinIcon)\n    pinImgStyleLoad(pinImg)\n    rankStyleLoad(rank,rankNumberData)\n    parentDivStyleLoad(parentDiv)\n    //\n\n    pinIcon.appendChild(pinImg)\n    parentDiv.appendChild(rank)\n    parentDiv.appendChild(pinIcon)\n    rank.innerHTML = `Rank ⍜ ${rankNumberData}`;\n    const nodeToAppendTo = element.querySelector(\"div > .mt-auto > div.my-2\");\n    nodeToAppendTo.querySelector(\"span\").style.width = \"fit-content\";\n    nodeToAppendTo.style.display = \"flex\";\n    nodeToAppendTo.style.justifyContent = \"space-between\";\n    nodeToAppendTo.appendChild(parentDiv.cloneNode(true));\n    \n    iterator++\n  };\n  //main function\n  setTimeout(function () {\n    // it should work\n    injectElements();\n    const targetNode= document.querySelector(\n      \".infinite-scroll-component > div.tw-flex.tw-flex-wrap.tw-overflow-hidden\"\n    );\n  \n    // Options for the observer (which mutations to observe)\n    // Set attributes to false if you do not care if existing nodes have changed,\n    //  otherwise set it true.\n    const config = { childList: true };\n  \n    // Callback function to execute when mutations are observed\n    const callback = function (mutationsList:any, observer:any) {\n      for (const mutation of mutationsList) {\n        if (mutation.type === \"childList\") {\n          injectElements(mutation.addedNodes[0]);\n        }\n      }\n    };\n  \n    // Create an observer instance linked to the callback function\n    const observer = new MutationObserver(callback);\n    \n    // Start observing the target node for configured mutations\n    observer.observe(targetNode!, config);\n  }, 3500);\n",["53","54"],"/home/gacheru/apps/nft-sniper/src/chrome/background.ts",[],["55","56"],"/home/gacheru/apps/nft-sniper/src/routes/About.tsx",[],"/home/gacheru/apps/nft-sniper/src/index.tsx",[],["57","58"],"/home/gacheru/apps/nft-sniper/src/App.tsx",[],"/home/gacheru/apps/nft-sniper/src/reportWebVitals.ts",[],{"ruleId":"59","severity":1,"message":"60","line":3,"column":10,"nodeType":"61","messageId":"62","endLine":3,"endColumn":23},{"ruleId":"59","severity":1,"message":"63","line":3,"column":25,"nodeType":"61","messageId":"62","endLine":3,"endColumn":31},{"ruleId":"59","severity":1,"message":"64","line":135,"column":12,"nodeType":"61","messageId":"62","endLine":135,"endColumn":15},{"ruleId":"59","severity":1,"message":"65","line":135,"column":17,"nodeType":"61","messageId":"62","endLine":135,"endColumn":23},{"ruleId":"59","severity":1,"message":"66","line":136,"column":12,"nodeType":"61","messageId":"62","endLine":136,"endColumn":31},{"ruleId":"59","severity":1,"message":"67","line":136,"column":33,"nodeType":"61","messageId":"62","endLine":136,"endColumn":55},{"ruleId":"59","severity":1,"message":"68","line":138,"column":10,"nodeType":"61","messageId":"62","endLine":138,"endColumn":14},{"ruleId":"69","severity":1,"message":"70","line":150,"column":17,"nodeType":"71","endLine":150,"endColumn":72},{"ruleId":"69","severity":1,"message":"70","line":158,"column":17,"nodeType":"71","endLine":158,"endColumn":74},{"ruleId":"69","severity":1,"message":"70","line":165,"column":37,"nodeType":"71","endLine":165,"endColumn":113},{"ruleId":"69","severity":1,"message":"70","line":180,"column":17,"nodeType":"71","endLine":180,"endColumn":75},{"ruleId":"69","severity":1,"message":"70","line":188,"column":37,"nodeType":"71","endLine":188,"endColumn":117},{"ruleId":"69","severity":1,"message":"70","line":203,"column":17,"nodeType":"71","endLine":203,"endColumn":76},{"ruleId":"69","severity":1,"message":"70","line":211,"column":37,"nodeType":"71","endLine":211,"endColumn":117},{"ruleId":"59","severity":1,"message":"72","line":6,"column":9,"nodeType":"61","messageId":"62","endLine":6,"endColumn":15},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"73","replacedBy":"77"},{"ruleId":"75","replacedBy":"78"},{"ruleId":"73","replacedBy":"79"},{"ruleId":"75","replacedBy":"80"},"@typescript-eslint/no-unused-vars","'ChromeMessage' is defined but never used.","Identifier","unusedVar","'Sender' is defined but never used.","'url' is assigned a value but never used.","'setUrl' is assigned a value but never used.","'responseFromContent' is assigned a value but never used.","'setResponseFromContent' is assigned a value but never used.","'push' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'parser' is assigned a value but never used.","no-native-reassign",["81"],"no-negated-in-lhs",["82"],["81"],["82"],["81"],["82"],"no-global-assign","no-unsafe-negation"]